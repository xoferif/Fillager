@using Microsoft.Extensions.Primitives
@model Fillager.ViewModels.FileListViewModel
@{
    ViewData["Title"] = "Public Files";
}

<div class="page-header">
    <h3>Public Files</h3>
    <hr/>
    @{
        StringValues error;
        if (Context.Request.Query.TryGetValue("error", out error))
        {
            <div class="alert alert-danger">
                @error
            </div>
        }
    }

    <div class="panel-group">
        <div class="panel panel-primary">
            <div class="panel-heading">Upload Files</div>
            <div class="panel-group">
                @await Component.InvokeAsync("FileUploadZone", "UploadPublicFiles")
                <div class="progress">
                    <div class="bar progress-bar progress-bar-info"></div>
                    <div class="percent">0%</div>
                </div>
            </div>
        </div>

        <form asp-action="" asp-controller="Fillager" method="post">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" href="#publicFileList">Public Files</a>
                        @if (Model.ShowDiskUsedPctMarker)
                        {
                            <span class="label label-warning">@Model.DiskUsedPct %</span>
                        }
                        <span class="pull-right">
                            <input type="submit" class="btn-info" value="Download" id="DownloadMultiple"/>
                            <input type="checkbox" class="check" id="checkAll">
                        </span>
                    </h4>
                </div>
                <div id="publicFileList" class="panel-collapse collapse in">
                    @await Component.InvokeAsync("FileList", Model)
                </div>
            </div>
        </form>
    </div>
</div>

<div id="modal-container" class="modal fade hidden-print" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">

        </div>
    </div>
</div>


<style>
    .hoverable:hover { background-color: #ecf0f1; }

    input [type=checkbox] {
        -moz-transform: scale(2); /* FF */
        /* Double-sized Checkboxes */
        -ms-transform: scale(2); /* IE */
        -o-transform: scale(2); /* Opera */
        -webkit-transform: scale(1.75); /* Safari and Chrome */
        margin-left: 10px;
    }
</style>
@section Scripts
{
    <script src="https://cdn.jsdelivr.net/clipboard.js/1.5.16/clipboard.min.js"></script>
    <script>
        new Clipboard('.copyBtn');
    </script>

    <script>
        $(function() {
            // when the modal is closed
            $('#modal-container').on('hidden.bs.modal',
                function() {
                    // remove the bs.modal data attribute from it
                    $(this).removeData('bs.modal');
                    // and empty the modal-content element
                    $('#modal-container .modal-content').empty();
                });
        });
    </script>
    <script src="http://malsup.github.com/jquery.form.js"></script>
    <script>
        var bar = $('.bar');
        var percent = $('.percent');
        var status = $('#status');

        $('#js-upload-form').ajaxForm({
            beforeSend: function() {
                status.empty();
                var percentVal = '0%';
                bar.width(percentVal);
                percent.html(percentVal);
            },
            uploadProgress: function(event, position, total, percentComplete) {
                var percentVal = percentComplete + '%';
                bar.width(percentVal);
                percent.html(percentVal);
            },
            success: function() {
                var percentVal = '100%';
                bar.width(percentVal);
                percent.html(percentVal);
            },
            complete: function(xhr) {
                status.html(xhr.responseText);
            }
        });
    </script>
    <script>
        $(function() {

            // UPLOAD CLASS DEFINITION
            // ======================

            var dropZone = document.getElementById('drop-zone');
            var uploadForm = document.getElementById('js-upload-form');
            var $form = $('js-upload-form');

            var startUpload = function(files) {
                document.getElementById('js-upload-files').files = files; //works for all except firefox and IE / edge
                uploadForm.submit();
            };
            uploadForm.addEventListener('submit',
                function(e) {
                    var uploadFiles = document.getElementById('js-upload-files').files;
                    startUpload(uploadFiles);
                });
            dropZone.ondrop = function(e) {
                e.preventDefault();
                this.className = 'upload-drop-zone';

                startUpload(e.dataTransfer.files);
            };
            dropZone.ondragover = function() {
                this.className = 'upload-drop-zone drop';
                return false;
            };
            dropZone.ondragleave = function() {
                this.className = 'upload-drop-zone';
                return false;
            };
        });
    </script>
    <script>
        $("#checkAll").click(function() {
            $(".check").prop('checked', $(this).prop('checked'));
        });
    </script>
    <script>
        $("#DownloadMultiple").click(function(e) {
            e.preventDefault();
            var someVar = $(".check:checked");
            someVar.each(function(key, value) {
                var fileId = value.value;
                var fileAnchor = $("#file-dl-" + fileId);
                setTimeout(
                    function() {
                        fileAnchor[0].click();
                    },
                    key * 1500
                    //TODO: Create a proper Deferred / Promise function so as to ensure that all files get downloaded
                );
            });
        });
    </script>
}